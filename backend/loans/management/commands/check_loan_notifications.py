from django.core.management.base import BaseCommand
from django.utils import timezone
from loans.services import LoanNotificationService


class Command(BaseCommand):
    help = 'Verifica empr√©stimos e envia notifica√ß√µes de lembrete e atraso'

    def add_arguments(self, parser):
        parser.add_argument(
            '--hours-before',
            type=int,
            default=2,
            help='Horas antes do vencimento para enviar lembrete (padr√£o: 2)'
        )
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='Mostra informa√ß√µes detalhadas'
        )

    def handle(self, *args, **options):
        hours_before = options['hours_before']
        verbose = options['verbose']
        
        start_time = timezone.now()
        
        if verbose:
            self.stdout.write(f"üîç Iniciando verifica√ß√£o de empr√©stimos √†s {start_time.strftime('%H:%M:%S')}")
            self.stdout.write(f"üìã Configura√ß√£o: lembretes {hours_before}h antes do vencimento")
        
        try:
            # Verifica empr√©stimos que vencem em breve
            reminders_sent = LoanNotificationService.check_upcoming_returns(hours_before)
            
            # Verifica empr√©stimos em atraso
            overdue_sent = LoanNotificationService.check_overdue_loans()
            
            total_notifications = reminders_sent + overdue_sent
            
            # Relat√≥rio de execu√ß√£o
            if verbose or total_notifications > 0:
                self.stdout.write(
                    self.style.SUCCESS(
                        f"‚úÖ Verifica√ß√£o conclu√≠da em {(timezone.now() - start_time).total_seconds():.2f}s"
                    )
                )
                self.stdout.write(f"üì® Lembretes enviados: {reminders_sent}")
                self.stdout.write(f"üö® Notifica√ß√µes de atraso: {overdue_sent}")
                self.stdout.write(f"üìä Total de notifica√ß√µes: {total_notifications}")
            
            if total_notifications == 0 and verbose:
                self.stdout.write("‚ú® Nenhuma notifica√ß√£o foi necess√°ria")
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"‚ùå Erro ao verificar empr√©stimos: {str(e)}")
            )
            raise e